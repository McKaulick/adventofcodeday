{"ast":null,"code":"const getTotalDay2 = function (stringValues) {\n  var elfBag = {\n    red: 12,\n    green: 13,\n    blue: 14\n  };\n  stringValues = \"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\";\n  let total = 0;\n\n  //console.log(stringValues.length);\n\n  //for (let i = 0; i < stringValues.length; i++) {\n  var thisValue = stringValues.split(/:|;/);\n  //console.log(stringValues);\n  var gameDeck = [];\n  for (var element in thisValue) {\n    gameDeck.push(thisValue[element]);\n  }\n  var game = gameDeck.shift();\n  //console.log(\"Game: \"+game);\n  //var bag = { red: 0, green: 0, blue: 0 };\n\n  for (var hands in gameDeck) {\n    var deck = [];\n    deck = gameDeck[hands].split(\",\");\n    var possible = true;\n    for (var cubes in deck) {\n      if (possible === true) {\n        if (elfBag[color] >= num) {\n          console.log(`Key: ${key}, Value: ${value}`);\n          console.log(`${elfBag[color]}--${value}`);\n          deck[cubes] = deck[cubes].trimStart();\n          var [num, color] = deck[cubes].split(\" \");\n          possible = true;\n        } else {\n          possible = false;\n        }\n      }\n      //console.log(\"Game: \"+game+\": \"+possible);\n    }\n    console.log(possible);\n    if (possible === true) {\n      //console.log(nbr);\n      var [game, nbr] = game.split(\" \");\n      total = total + Number(nbr);\n    }\n  }\n\n  /* \n  for (const [key, value] of Object.entries(bag)) {\n      var possible = true;\n      //console.log(`Key: ${key}, Value: ${value}`);\n      //console.log(`${elfBag[key]}--${value}`);\n      if (elfBag[key] < value)\n          possible = false;\n  }\n  //console.log(possible);\n  if (possible === true) {\n      console.log(game);\n      var [game, nbr] = game.split(\" \")\n      total = total + Number(nbr);\n  }\n  */\n  //}\n  return total;\n};\nexport default getTotalDay2;","map":{"version":3,"names":["getTotalDay2","stringValues","elfBag","red","green","blue","total","thisValue","split","gameDeck","element","push","game","shift","hands","deck","possible","cubes","color","num","console","log","key","value","trimStart","nbr","Number"],"sources":["/Users/patricefiset/development/ReactApp/adventofcodeday/src/day2.js"],"sourcesContent":["const getTotalDay2 = function(stringValues) {\n\n    var elfBag = { red: 12, green: 13, blue: 14 };\n    stringValues = \"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\";\n    let total = 0;\n\n    //console.log(stringValues.length);\n\n    //for (let i = 0; i < stringValues.length; i++) {\n        var thisValue = stringValues.split(/:|;/); \n        //console.log(stringValues);\n        var gameDeck = [];\n        for (var element in thisValue) {\n            gameDeck.push(thisValue[element]);\n        }\n        var game = gameDeck.shift();\n        //console.log(\"Game: \"+game);\n        //var bag = { red: 0, green: 0, blue: 0 };\n\n        for (var hands in gameDeck) {\n            var deck = [];\n            deck = gameDeck[hands].split(\",\");\n\n            var possible = true;\n\n            for (var cubes in deck) {\n                if (possible === true) {\n                    if (elfBag[color] >= num) {\n                        console.log(`Key: ${key}, Value: ${value}`);\n                        console.log(`${elfBag[color]}--${value}`);\n                        deck[cubes] = deck[cubes].trimStart();\n                        var [num, color] = deck[cubes].split(\" \");\n                            possible = true;\n                    }\n                    else {\n                        possible = false;\n                    }\n                }\n                //console.log(\"Game: \"+game+\": \"+possible);\n            }\n\n            console.log(possible);\n            if (possible === true) {\n                //console.log(nbr);\n                var [game, nbr] = game.split(\" \")\n                total = total + Number(nbr);\n           }\n        }\n\n        /* \n        for (const [key, value] of Object.entries(bag)) {\n            var possible = true;\n            //console.log(`Key: ${key}, Value: ${value}`);\n            //console.log(`${elfBag[key]}--${value}`);\n            if (elfBag[key] < value)\n                possible = false;\n        }\n        //console.log(possible);\n        if (possible === true) {\n            console.log(game);\n            var [game, nbr] = game.split(\" \")\n            total = total + Number(nbr);\n        }\n        */\n    //}\n    return total;\n}\n\nexport default getTotalDay2;\n  "],"mappings":"AAAA,MAAMA,YAAY,GAAG,SAAAA,CAASC,YAAY,EAAE;EAExC,IAAIC,MAAM,GAAG;IAAEC,GAAG,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC;EAC7CJ,YAAY,GAAG,wDAAwD;EACvE,IAAIK,KAAK,GAAG,CAAC;;EAEb;;EAEA;EACI,IAAIC,SAAS,GAAGN,YAAY,CAACO,KAAK,CAAC,KAAK,CAAC;EACzC;EACA,IAAIC,QAAQ,GAAG,EAAE;EACjB,KAAK,IAAIC,OAAO,IAAIH,SAAS,EAAE;IAC3BE,QAAQ,CAACE,IAAI,CAACJ,SAAS,CAACG,OAAO,CAAC,CAAC;EACrC;EACA,IAAIE,IAAI,GAAGH,QAAQ,CAACI,KAAK,CAAC,CAAC;EAC3B;EACA;;EAEA,KAAK,IAAIC,KAAK,IAAIL,QAAQ,EAAE;IACxB,IAAIM,IAAI,GAAG,EAAE;IACbA,IAAI,GAAGN,QAAQ,CAACK,KAAK,CAAC,CAACN,KAAK,CAAC,GAAG,CAAC;IAEjC,IAAIQ,QAAQ,GAAG,IAAI;IAEnB,KAAK,IAAIC,KAAK,IAAIF,IAAI,EAAE;MACpB,IAAIC,QAAQ,KAAK,IAAI,EAAE;QACnB,IAAId,MAAM,CAACgB,KAAK,CAAC,IAAIC,GAAG,EAAE;UACtBC,OAAO,CAACC,GAAG,CAAE,QAAOC,GAAI,YAAWC,KAAM,EAAC,CAAC;UAC3CH,OAAO,CAACC,GAAG,CAAE,GAAEnB,MAAM,CAACgB,KAAK,CAAE,KAAIK,KAAM,EAAC,CAAC;UACzCR,IAAI,CAACE,KAAK,CAAC,GAAGF,IAAI,CAACE,KAAK,CAAC,CAACO,SAAS,CAAC,CAAC;UACrC,IAAI,CAACL,GAAG,EAAED,KAAK,CAAC,GAAGH,IAAI,CAACE,KAAK,CAAC,CAACT,KAAK,CAAC,GAAG,CAAC;UACrCQ,QAAQ,GAAG,IAAI;QACvB,CAAC,MACI;UACDA,QAAQ,GAAG,KAAK;QACpB;MACJ;MACA;IACJ;IAEAI,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;IACrB,IAAIA,QAAQ,KAAK,IAAI,EAAE;MACnB;MACA,IAAI,CAACJ,IAAI,EAAEa,GAAG,CAAC,GAAGb,IAAI,CAACJ,KAAK,CAAC,GAAG,CAAC;MACjCF,KAAK,GAAGA,KAAK,GAAGoB,MAAM,CAACD,GAAG,CAAC;IAChC;EACH;;EAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA,OAAOnB,KAAK;AAChB,CAAC;AAED,eAAeN,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}