{"ast":null,"code":"const getTotalDay2 = function (stringValues) {\n  var elfBag = {\n    red: 12,\n    green: 13,\n    blue: 14\n  };\n  stringValues = \"Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\";\n  let total = 0;\n\n  //console.log(stringValues.length);\n\n  //for (let i = 0; i < stringValues.length; i++) {\n  var thisValue = stringValues.split(/:|;/);\n  //console.log(stringValues);\n  var gameDeck = [];\n  for (var element in thisValue) {\n    gameDeck.push(thisValue[element]);\n  }\n  var game = gameDeck.shift();\n  console.log(\"Game: \" + game);\n  //var bag = { red: 0, green: 0, blue: 0 };\n\n  for (var hands in gameDeck) {\n    var deck = [];\n    deck = gameDeck[hands].split(\",\");\n    var possible = true;\n    for (var cubes in deck) {\n      do {\n        deck[cubes] = deck[cubes].trimStart();\n        var [num, color] = deck[cubes].split(\" \");\n        //bag[color] = Number(bag[color])+Number(num);\n        //console.log(`Color: ${color}, #: ${num}`);\n        if (elfBag[color] >= num) {\n          possible = true;\n        } else possible = false;\n      } while (possible === true);\n      console.log(\"Game: \" + game + \": \" + possible);\n    }\n    console.log(possible);\n    if (possible === true) {\n      //console.log(nbr);\n      var [game, nbr] = game.split(\" \");\n      total = total + Number(nbr);\n    }\n  }\n\n  /* \n  for (const [key, value] of Object.entries(bag)) {\n      var possible = true;\n      //console.log(`Key: ${key}, Value: ${value}`);\n      //console.log(`${elfBag[key]}--${value}`);\n      if (elfBag[key] < value)\n          possible = false;\n  }\n  //console.log(possible);\n  if (possible === true) {\n      console.log(game);\n      var [game, nbr] = game.split(\" \")\n      total = total + Number(nbr);\n  }\n  */\n  //}\n  return total;\n};\nexport default getTotalDay2;","map":{"version":3,"names":["getTotalDay2","stringValues","elfBag","red","green","blue","total","thisValue","split","gameDeck","element","push","game","shift","console","log","hands","deck","possible","cubes","trimStart","num","color","nbr","Number"],"sources":["/Users/patricefiset/development/ReactApp/adventofcodeday/src/day2.js"],"sourcesContent":["const getTotalDay2 = function(stringValues) {\n\n    var elfBag = { red: 12, green: 13, blue: 14 };\n    stringValues = \"Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\";\n    let total = 0;\n\n    //console.log(stringValues.length);\n\n    //for (let i = 0; i < stringValues.length; i++) {\n        var thisValue = stringValues.split(/:|;/); \n        //console.log(stringValues);\n        var gameDeck = [];\n        for (var element in thisValue) {\n            gameDeck.push(thisValue[element]);\n        }\n        var game = gameDeck.shift();\n        console.log(\"Game: \"+game);\n        //var bag = { red: 0, green: 0, blue: 0 };\n\n        for (var hands in gameDeck) {\n            var deck = [];\n            deck = gameDeck[hands].split(\",\");\n            var possible = true;\n\n            for (var cubes in deck) {\n                do {\n                    deck[cubes] = deck[cubes].trimStart();\n                    var [num, color] = deck[cubes].split(\" \");\n                    //bag[color] = Number(bag[color])+Number(num);\n                    //console.log(`Color: ${color}, #: ${num}`);\n                    if (elfBag[color] >= num) {\n                        possible = true;\n                    }\n                    else \n                        possible = false;\n                } while (possible === true);\n\n                console.log(\"Game: \"+game+\": \"+possible);\n            }\n            console.log(possible);\n            if (possible === true) {\n                //console.log(nbr);\n                var [game, nbr] = game.split(\" \")\n                total = total + Number(nbr);\n           }\n        }\n\n        /* \n        for (const [key, value] of Object.entries(bag)) {\n            var possible = true;\n            //console.log(`Key: ${key}, Value: ${value}`);\n            //console.log(`${elfBag[key]}--${value}`);\n            if (elfBag[key] < value)\n                possible = false;\n        }\n        //console.log(possible);\n        if (possible === true) {\n            console.log(game);\n            var [game, nbr] = game.split(\" \")\n            total = total + Number(nbr);\n        }\n        */\n    //}\n    return total;\n}\n\nexport default getTotalDay2;\n  "],"mappings":"AAAA,MAAMA,YAAY,GAAG,SAAAA,CAASC,YAAY,EAAE;EAExC,IAAIC,MAAM,GAAG;IAAEC,GAAG,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC;EAC7CJ,YAAY,GAAG,0EAA0E;EACzF,IAAIK,KAAK,GAAG,CAAC;;EAEb;;EAEA;EACI,IAAIC,SAAS,GAAGN,YAAY,CAACO,KAAK,CAAC,KAAK,CAAC;EACzC;EACA,IAAIC,QAAQ,GAAG,EAAE;EACjB,KAAK,IAAIC,OAAO,IAAIH,SAAS,EAAE;IAC3BE,QAAQ,CAACE,IAAI,CAACJ,SAAS,CAACG,OAAO,CAAC,CAAC;EACrC;EACA,IAAIE,IAAI,GAAGH,QAAQ,CAACI,KAAK,CAAC,CAAC;EAC3BC,OAAO,CAACC,GAAG,CAAC,QAAQ,GAACH,IAAI,CAAC;EAC1B;;EAEA,KAAK,IAAII,KAAK,IAAIP,QAAQ,EAAE;IACxB,IAAIQ,IAAI,GAAG,EAAE;IACbA,IAAI,GAAGR,QAAQ,CAACO,KAAK,CAAC,CAACR,KAAK,CAAC,GAAG,CAAC;IACjC,IAAIU,QAAQ,GAAG,IAAI;IAEnB,KAAK,IAAIC,KAAK,IAAIF,IAAI,EAAE;MACpB,GAAG;QACCA,IAAI,CAACE,KAAK,CAAC,GAAGF,IAAI,CAACE,KAAK,CAAC,CAACC,SAAS,CAAC,CAAC;QACrC,IAAI,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGL,IAAI,CAACE,KAAK,CAAC,CAACX,KAAK,CAAC,GAAG,CAAC;QACzC;QACA;QACA,IAAIN,MAAM,CAACoB,KAAK,CAAC,IAAID,GAAG,EAAE;UACtBH,QAAQ,GAAG,IAAI;QACnB,CAAC,MAEGA,QAAQ,GAAG,KAAK;MACxB,CAAC,QAAQA,QAAQ,KAAK,IAAI;MAE1BJ,OAAO,CAACC,GAAG,CAAC,QAAQ,GAACH,IAAI,GAAC,IAAI,GAACM,QAAQ,CAAC;IAC5C;IACAJ,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;IACrB,IAAIA,QAAQ,KAAK,IAAI,EAAE;MACnB;MACA,IAAI,CAACN,IAAI,EAAEW,GAAG,CAAC,GAAGX,IAAI,CAACJ,KAAK,CAAC,GAAG,CAAC;MACjCF,KAAK,GAAGA,KAAK,GAAGkB,MAAM,CAACD,GAAG,CAAC;IAChC;EACH;;EAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA,OAAOjB,KAAK;AAChB,CAAC;AAED,eAAeN,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}