{"ast":null,"code":"function getPossibility(gameDeck) {\n  var elfBag = {\n    red: 12,\n    green: 13,\n    blue: 14\n  };\n  var possible = true;\n  for (var hands in gameDeck) {\n    var deck = [];\n    deck = gameDeck[hands].split(\",\");\n    for (var cubes in deck) {\n      var possible = false;\n      deck[cubes] = deck[cubes].trimStart();\n      var [num, color] = deck[cubes].split(\" \");\n      if (elfBag[color] >= num) {\n        possible = true;\n      } else {\n        return false;\n      }\n    }\n  }\n  return possible;\n}\nconst getTotalDay2 = function (stringValues) {\n  stringValues = \"Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\";\n  let total = 0;\n\n  //console.log(stringValues.length);\n\n  //for (let i = 0; i < stringValues.length; i++) {\n  var thisValue = stringValues.split(/:|;/);\n  //console.log(stringValues);\n  var gameDeck = [];\n  for (var element in thisValue) {\n    gameDeck.push(thisValue[element]);\n  }\n  var game = gameDeck.shift();\n  //console.log(\"Game: \"+game);\n  //var bag = { red: 0, green: 0, blue: 0 };\n\n  console.log(getPossibility(gameDeck));\n\n  /*\n  for (var hands in gameDeck) {\n      var deck = [];\n      deck = gameDeck[hands].split(\",\");\n       \n       for (var cubes in deck) {\n          var possible = false;\n          deck[cubes] = deck[cubes].trimStart();\n          var [num, color] = deck[cubes].split(\" \");\n          //bag[color] = Number(bag[color])+Number(num);\n          //console.log(`Color: ${color}, #: ${num}`);\n          if (elfBag[color] >= num) {\n              possible = true;\n          }\n          else \n              possible = false;\n           console.log(\"Game: \"+game+\": \"+possible);\n      }\n      if (possible === true) {\n          //console.log(nbr);\n          var [game, nbr] = game.split(\" \")\n          total = total + Number(nbr);\n     }\n  }\n  */\n\n  /* \n  for (const [key, value] of Object.entries(bag)) {\n      var possible = true;\n      //console.log(`Key: ${key}, Value: ${value}`);\n      //console.log(`${elfBag[key]}--${value}`);\n      if (elfBag[key] < value)\n          possible = false;\n  }\n  //console.log(possible);\n  if (possible === true) {\n      console.log(game);\n      var [game, nbr] = game.split(\" \")\n      total = total + Number(nbr);\n  }\n  */\n  //}\n  return total;\n};\nexport default getTotalDay2;","map":{"version":3,"names":["getPossibility","gameDeck","elfBag","red","green","blue","possible","hands","deck","split","cubes","trimStart","num","color","getTotalDay2","stringValues","total","thisValue","element","push","game","shift","console","log"],"sources":["/Users/patricefiset/development/ReactApp/adventofcodeday/src/day2.js"],"sourcesContent":["function getPossibility (gameDeck) { \n    var elfBag = { red: 12, green: 13, blue: 14 };\n    var possible = true;\n    for (var hands in gameDeck) {\n        var deck = [];\n        deck = gameDeck[hands].split(\",\");\n\n        for (var cubes in deck) {\n            var possible = false;\n            deck[cubes] = deck[cubes].trimStart();\n            var [num, color] = deck[cubes].split(\" \");\n            if (elfBag[color] >= num) {\n                possible = true;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return possible; \n}\n\nconst getTotalDay2 = function(stringValues) {\n\n    stringValues = \"Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\";\n    let total = 0;\n\n    //console.log(stringValues.length);\n\n    //for (let i = 0; i < stringValues.length; i++) {\n        var thisValue = stringValues.split(/:|;/); \n        //console.log(stringValues);\n        var gameDeck = [];\n        for (var element in thisValue) {\n            gameDeck.push(thisValue[element]);\n        }\n        var game = gameDeck.shift();\n        //console.log(\"Game: \"+game);\n        //var bag = { red: 0, green: 0, blue: 0 };\n\n        console.log(getPossibility(gameDeck));\n\n        /*\n        for (var hands in gameDeck) {\n            var deck = [];\n            deck = gameDeck[hands].split(\",\");\n\n            \n\n            for (var cubes in deck) {\n                var possible = false;\n                deck[cubes] = deck[cubes].trimStart();\n                var [num, color] = deck[cubes].split(\" \");\n                //bag[color] = Number(bag[color])+Number(num);\n                //console.log(`Color: ${color}, #: ${num}`);\n                if (elfBag[color] >= num) {\n                    possible = true;\n                }\n                else \n                    possible = false;\n\n                console.log(\"Game: \"+game+\": \"+possible);\n            }\n            if (possible === true) {\n                //console.log(nbr);\n                var [game, nbr] = game.split(\" \")\n                total = total + Number(nbr);\n           }\n        }\n        */\n        \n\n        /* \n        for (const [key, value] of Object.entries(bag)) {\n            var possible = true;\n            //console.log(`Key: ${key}, Value: ${value}`);\n            //console.log(`${elfBag[key]}--${value}`);\n            if (elfBag[key] < value)\n                possible = false;\n        }\n        //console.log(possible);\n        if (possible === true) {\n            console.log(game);\n            var [game, nbr] = game.split(\" \")\n            total = total + Number(nbr);\n        }\n        */\n    //}\n    return total;\n}\n\nexport default getTotalDay2;\n  "],"mappings":"AAAA,SAASA,cAAcA,CAAEC,QAAQ,EAAE;EAC/B,IAAIC,MAAM,GAAG;IAAEC,GAAG,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC;EAC7C,IAAIC,QAAQ,GAAG,IAAI;EACnB,KAAK,IAAIC,KAAK,IAAIN,QAAQ,EAAE;IACxB,IAAIO,IAAI,GAAG,EAAE;IACbA,IAAI,GAAGP,QAAQ,CAACM,KAAK,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC;IAEjC,KAAK,IAAIC,KAAK,IAAIF,IAAI,EAAE;MACpB,IAAIF,QAAQ,GAAG,KAAK;MACpBE,IAAI,CAACE,KAAK,CAAC,GAAGF,IAAI,CAACE,KAAK,CAAC,CAACC,SAAS,CAAC,CAAC;MACrC,IAAI,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGL,IAAI,CAACE,KAAK,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC;MACzC,IAAIP,MAAM,CAACW,KAAK,CAAC,IAAID,GAAG,EAAE;QACtBN,QAAQ,GAAG,IAAI;MACnB,CAAC,MACI;QACD,OAAO,KAAK;MAChB;IACJ;EACJ;EACA,OAAOA,QAAQ;AACnB;AAEA,MAAMQ,YAAY,GAAG,SAAAA,CAASC,YAAY,EAAE;EAExCA,YAAY,GAAG,wDAAwD;EACvE,IAAIC,KAAK,GAAG,CAAC;;EAEb;;EAEA;EACI,IAAIC,SAAS,GAAGF,YAAY,CAACN,KAAK,CAAC,KAAK,CAAC;EACzC;EACA,IAAIR,QAAQ,GAAG,EAAE;EACjB,KAAK,IAAIiB,OAAO,IAAID,SAAS,EAAE;IAC3BhB,QAAQ,CAACkB,IAAI,CAACF,SAAS,CAACC,OAAO,CAAC,CAAC;EACrC;EACA,IAAIE,IAAI,GAAGnB,QAAQ,CAACoB,KAAK,CAAC,CAAC;EAC3B;EACA;;EAEAC,OAAO,CAACC,GAAG,CAACvB,cAAc,CAACC,QAAQ,CAAC,CAAC;;EAErC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAMQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA,OAAOe,KAAK;AAChB,CAAC;AAED,eAAeF,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}